{"version":3,"file":"ngx-audio-player.component.js","sourceRoot":"","sources":["../../../../../projects/ngx-audio-player/src/lib/component/ngx-audio-player/ngx-audio-player.component.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Component, OnInit, Input, ViewChild, Output, ElementRef, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Track } from '../../model/track.model';\r\nimport { MatSlider } from '@angular/material/slider';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { AudioPlayerService } from '../../service/audio-player-service/audio-player.service';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'mat-advanced-audio-player,ngx-audio-player',\r\n    templateUrl: './ngx-audio-player.component.html',\r\n    styleUrls: ['./ngx-audio-player.component.css']\r\n})\r\nexport class AudioPlayerComponent implements OnInit, OnChanges {\r\n\r\n    audioPlayerService: AudioPlayerService;\r\n    repeat: string = 'all';\r\n    constructor(elem: ElementRef) {\r\n        if (elem.nativeElement.tagName.toLowerCase() === 'mat-advanced-audio-player') {\r\n            console.warn(`'mat-advanced-audio-player' selector is deprecated; use 'ngx-audio-player' instead.`);\r\n        }\r\n        this.audioPlayerService = new AudioPlayerService();\r\n    }\r\n\r\n    @Input()\r\n    set playlist(playlist: Track[]) {\r\n        this.audioPlayerService.setPlaylist(playlist);\r\n    }\r\n\r\n    @ViewChild(MatPaginator, { static: false }) set matPaginator(mp: MatPaginator) {\r\n        this.paginator = mp;\r\n        this.setDataSourceAttributes();\r\n    }\r\n\r\n\r\n    displayedColumns: string[];\r\n    dataSource = new MatTableDataSource<Track>();\r\n    paginator: MatPaginator;\r\n\r\n    timeLineDuration: MatSlider;\r\n\r\n    tracks: Track[] = [];\r\n\r\n    @Input() displayTitle = true;\r\n    @Input() displayPlaylist = true;\r\n    @Input() displayVolumeControls = true;\r\n    @Input() displayRepeatControls = true;\r\n    @Input() pageSizeOptions = [10, 20, 30];\r\n    @Input() expanded = true;\r\n    @Input() autoPlay = false;\r\n    @Input() disablePositionSlider = false;\r\n    @Input() displayArtist = false;\r\n    @Input() displayDuration = false;\r\n\r\n    // Support for internationalization\r\n    @Input() tableHeader = 'Playlist';\r\n    @Input() titleHeader = 'Title';\r\n    @Input() artistHeader = 'Artist';\r\n    @Input() durationHeader = 'Duration';\r\n\r\n\r\n    currentIndex = 0;\r\n\r\n    @Output()\r\n    trackEnded: Subject<string> = new Subject<string>();\r\n\r\n    @ViewChild('audioPlayer', { static: true }) player: ElementRef;\r\n\r\n    iOS = (/iPad|iPhone|iPod/.test(navigator.platform)\r\n        || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1));\r\n\r\n    loaderDisplay = false;\r\n    isPlaying = false;\r\n    currentTime = 0;\r\n    volume = 0.1;\r\n    duration = 0.01;\r\n\r\n    private startOffsetValue = 0;\r\n    @Input()\r\n    set startOffset(seconds: number) {\r\n        this.startOffsetValue = seconds;\r\n        this.player.nativeElement.currentTime = seconds;\r\n    }\r\n    get startOffset(): number {\r\n        return this.startOffsetValue;\r\n    }\r\n\r\n    @Input()\r\n    public endOffset = 0;\r\n\r\n    currTimePosChanged(event) {\r\n        this.player.nativeElement.currentTime = event.value;\r\n    }\r\n\r\n    bindPlayerEvent(): void {\r\n\r\n        this.player.nativeElement.addEventListener('playing', () => {\r\n            this.isPlaying = true;\r\n            this.duration = Math.floor(this.player.nativeElement.duration);\r\n        });\r\n        this.player.nativeElement.addEventListener('pause', () => {\r\n            this.isPlaying = false;\r\n        });\r\n        this.player.nativeElement.addEventListener('timeupdate', () => {\r\n            this.currentTime = Math.floor(this.player.nativeElement.currentTime);\r\n            // BUG: Commenting for `ended` event not firing #66\r\n            // if (this.currentTime >= this.duration - this.endOffset) {\r\n            //     this.player.nativeElement.pause();\r\n            // }\r\n        });\r\n        this.player.nativeElement.addEventListener('volume', () => {\r\n            this.volume = Math.floor(this.player.nativeElement.volume);\r\n        });\r\n        if (!this.iOS) {\r\n            this.player.nativeElement.addEventListener('loadstart', () => {\r\n                this.loaderDisplay = true;\r\n            });\r\n        }\r\n        this.player.nativeElement.addEventListener('loadedmetadata', () => {\r\n            this.loaderDisplay = false;\r\n            this.duration = Math.floor(this.player.nativeElement.duration);\r\n        });\r\n        this.player.nativeElement.addEventListener('ended', () => {\r\n            this.trackEnded.next('ended');\r\n        });\r\n\r\n    }\r\n\r\n    playBtnHandler(): void {\r\n        if (this.loaderDisplay) {\r\n            return;\r\n        }\r\n        if (this.player.nativeElement.paused) {\r\n            if (this.currentTime >= this.duration - this.endOffset) {\r\n                this.player.nativeElement.currentTime = this.startOffset;\r\n            } else {\r\n                this.player.nativeElement.currentTime = this.currentTime;\r\n            }\r\n\r\n            this.player.nativeElement.play();\r\n        } else {\r\n            this.currentTime = this.player.nativeElement.currentTime;\r\n            this.player.nativeElement.pause();\r\n        }\r\n    }\r\n\r\n    play(track?: Track): void {\r\n\r\n        if (track) {\r\n            this.startOffset = track.startOffset || 0;\r\n            this.endOffset = track.endOffset || 0;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.player.nativeElement.play();\r\n        }, 50);\r\n\r\n    }\r\n\r\n    toggleVolume() {\r\n        if (this.volume === 0) {\r\n            this.setVolume(1.0);\r\n        } else {\r\n            this.setVolume(0);\r\n        }\r\n    }\r\n\r\n    toggleRepeat() {\r\n        if (this.repeat === 'none') {\r\n            this.repeat = 'all';\r\n        } else if (this.repeat === 'all') {\r\n            if (this.tracks.length > 1) {\r\n                this.repeat = 'one';\r\n            } else {\r\n                this.repeat = 'none';\r\n            }\r\n        } else if (this.repeat === 'one' && this.tracks.length > 1) {\r\n            this.repeat = 'none';\r\n        }\r\n    }\r\n\r\n    private setVolume(vol) {\r\n        this.volume = vol;\r\n        this.player.nativeElement.volume = this.volume;\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.bindPlayerEvent();\r\n\r\n        // auto play next track\r\n        this.player.nativeElement.addEventListener('ended', () => {\r\n            if (this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\r\n                if (this.repeat === 'all') {\r\n                    this.nextSong();\r\n                } else if (this.repeat === 'one') {\r\n                    this.play();\r\n                } else if (this.repeat === 'none') {\r\n                    // Do nothing\r\n                }\r\n            }\r\n        });\r\n\r\n        this.player.nativeElement.addEventListener('timeupdate', () => {\r\n            this.audioPlayerService.setCurrentTime(this.player.nativeElement.currentTime);\r\n        });\r\n\r\n        // Subscribe to playlist observer from AudioPlayerService and\r\n        // update the playlist within MatAdvancedAudioPlayerComponent\r\n        this.audioPlayerService.getPlaylist().subscribe(tracks => {\r\n            if (tracks !== null && tracks !== []) {\r\n                this.tracks = tracks;\r\n                this.initialize();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.hasOwnProperty('displayArtist') || changes.hasOwnProperty('displayDuration')) {\r\n            this.buildDisplayedColumns();\r\n        }\r\n    }\r\n\r\n    private buildDisplayedColumns() {\r\n        this.displayedColumns = ['title'];\r\n        if (this.displayArtist) {\r\n            this.displayedColumns.push('artist');\r\n        }\r\n        if (this.displayDuration) {\r\n            this.displayedColumns.push('duration');\r\n        }\r\n        this.displayedColumns.push('status');\r\n    }\r\n\r\n    initialize() {\r\n        this.buildDisplayedColumns();\r\n\r\n        // populate indexs for the track and configure\r\n        // material table data source and paginator\r\n        this.setDataSourceAttributes();\r\n\r\n\r\n        this.player.nativeElement.currentTime = this.startOffset;\r\n        this.updateCurrentTrack();\r\n\r\n        if (this.autoPlay) {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    setDataSourceAttributes() {\r\n        let index = 1;\r\n        if (this.tracks) {\r\n            this.tracks.forEach((track: Track) => {\r\n                track.index = index++;\r\n            });\r\n            this.dataSource = new MatTableDataSource<Track>(this.tracks);\r\n            this.dataSource.paginator = this.paginator;\r\n        }\r\n    }\r\n\r\n    nextSong(): void {\r\n        if (this.displayPlaylist === true\r\n            && (((this.currentIndex + 1) % this.paginator.pageSize) === 0\r\n                || (this.currentIndex + 1) === this.paginator.length)) {\r\n            if (this.paginator.hasNextPage()) {\r\n                this.paginator.nextPage();\r\n            } else if (!this.paginator.hasNextPage()) {\r\n                this.paginator.firstPage();\r\n            }\r\n        }\r\n        this.currentTime = 0;\r\n        this.duration = 0.01;\r\n        if ((this.currentIndex + 1) >= this.tracks.length) {\r\n            this.currentIndex = 0;\r\n        } else {\r\n            this.currentIndex++;\r\n        }\r\n        this.updateCurrentTrack();\r\n        this.play();\r\n    }\r\n\r\n    previousSong(): void {\r\n        this.currentTime = 0;\r\n        this.duration = 0.01;\r\n        if (!this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\r\n            if (this.displayPlaylist === true\r\n                && (((this.currentIndex) % this.paginator.pageSize) === 0\r\n                    || (this.currentIndex === 0))) {\r\n                if (this.paginator.hasPreviousPage()) {\r\n                    this.paginator.previousPage();       \r\n                } else if (!this.paginator.hasPreviousPage()) {\r\n                    this.paginator.lastPage();\r\n                }\r\n            }\r\n            if ((this.currentIndex - 1) < 0) {\r\n                this.currentIndex = (this.tracks.length - 1);\r\n            } else {\r\n                this.currentIndex--;\r\n            }\r\n        } else {\r\n            this.resetSong();\r\n        }\r\n        this.updateCurrentTrack();\r\n        this.play();\r\n    }\r\n\r\n    resetSong(): void {\r\n        this.player.nativeElement.src = this.tracks[this.currentIndex].link;\r\n    }\r\n\r\n    selectTrack(index: number): void {\r\n        this.currentIndex = index - 1;\r\n        this.updateCurrentTrack();\r\n        this.play();\r\n    }\r\n\r\n    checkIfSongHasStartedSinceAtleastTwoSeconds(): boolean {\r\n        return this.player.nativeElement.currentTime > 2;\r\n    }\r\n\r\n    updateCurrentTrack() {\r\n        this.audioPlayerService.setCurrentTrack(this.tracks[this.currentIndex]);\r\n    }\r\n\r\n}\r\n"]}